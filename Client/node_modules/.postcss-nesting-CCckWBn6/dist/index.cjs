"use strict";var e=require("postcss-selector-parser"),t=require("@csstools/selector-specificity");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=n(e);function r(e){if(!e.nodes.length)return void e.remove();const t=e.nodes.filter((e=>"comment"===e.type));t.length===e.nodes.length&&e.replaceWith(...t)}function s(e){const t=e.parent,n=t.index(e);if(n){const e=t.cloneBefore().removeAll().append(t.nodes.slice(0,n));e.raws.semicolon=!0,r(e)}return t.before(e),t.raws.semicolon=!0,t}function l(e,t){if(t<2)throw new Error("n must be greater than 1");if(e.length<2)throw new Error("s must be greater than 1");if(Math.pow(e.length,t)>1e4)throw new Error("Too many combinations when trying to resolve a nested selector with lists, reduce the complexity of your selectors");const n=[];for(let e=0;e<t;e++)n[e]=0;const o=[];for(;;){const r=[];for(let s=t-1;s>=0;s--){let t=n[s];if(t>=e.length){if(t=0,n[s]=0,0===s)return o;n[s-1]+=1}r[s]=e[t]}o.push(r),n[n.length-1]++}}const p=o.default.pseudo({value:":is"});function c(e){if(!e||!e.nodes)return;const t=[];let n=[];for(let r=0;r<e.nodes.length;r++)if("combinator"!==e.nodes[r].type)if(o.default.isPseudoElement(e.nodes[r]))t.push(n),n=[e.nodes[r]];else{if("tag"===e.nodes[r].type&&n.find((e=>"tag"===e.type))){const t=p.clone(),n=e.nodes[r];n.replaceWith(t),t.append(n)}n.push(e.nodes[r])}else t.push(n),t.push([e.nodes[r]]),n=[];t.push(n);const r=[];for(let e=0;e<t.length;